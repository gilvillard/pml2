#
#   Copyright (C) 2025 Vincent Neiger
#
#   This file is part of PML.
#
#   PML is free software: you can redistribute it and/or modify it under the
#   terms of the GNU General Public License version 2.0 (GPL-2.0-or-later) as
#   published by the Free Software Foundation; either version 2.0 of the
#   License, or (at your option) any later version. See
#   <https://www.gnu.org/licenses/>.
#

##
# this file is adapted from FLINT's configure.ac (June 2025)
##

#
#   Copyright (C) 2023, 2024 Albin Ahlb√§ck
#
#   This file is part of FLINT.
#
#   FLINT is free software: you can redistribute it and/or modify it under
#   the terms of the GNU Lesser General Public License (LGPL) as published
#   by the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.  See <https://www.gnu.org/licenses/>.
#

# These point to the building directory
PML_DIR:=.
SRC_DIR:=src
BUILD_DIR:=build

# These point to the source directory
ABS_PML_DIR:=@abs_srcdir@
ABS_SRC_DIR:=$(ABS_PML_DIR)/$(SRC_DIR)

IS_OUT_OF_TREE:=@IS_OUT_OF_TREE@

PML_VERSION:=@PML_VERSION_FULL@
PML_MAJOR_SO:=@PML_MAJOR_SO@
PML_MINOR_SO:=@PML_MINOR_SO@
PML_PATCH_SO:=@PML_PATCH_SO@

PML_LIB:=@PML_LIB@
PML_LIB_MAJOR:=@PML_LIB_MAJOR@
PML_LIB_FULL:=@PML_LIB_FULL@
PML_IMPLIB:=@PML_IMPLIB@
PML_LIB_STATIC:=@PML_LIB_STATIC@

PML_DLLLIB:=@PML_DLLLIB@
PML_DYLIB:=@PML_DYLIB@
PML_SOLIB:=@PML_SOLIB@

prefix:=@prefix@
exec_prefix:=@exec_prefix@

INCLUDEDIR:=@includedir@
LIBDIR:=@libdir@
BINDIR:=@bindir@
PKGCONFIGDIR:=$(LIBDIR)/pkgconfig

HOST_OS:=@host_os@

EXEEXT:=@EXEEXT@

AR:=@AR@
CC:=@CC@
CXX:=@CXX@
DLLTOOL:=@DLLTOOL@
LD:=@LD@
LN_S:=@LN_S@
M4:=@M4@
MKDIR_P:=@MKDIR_P@
STRIP:=@STRIP@
RM_F:=rm -f
RM_RF:=rm -rf
CP:=cp
# `cp -a` is not supported on all systems, but `cp -pRP` seems to be POSIX.
CP_A:=cp -pRP
GDB:=gdb

STATIC:=@STATIC@
SHARED:=@SHARED@

COVERAGE:=@COVERAGE@
WANT_NTL:=@WANT_NTL@

WANT_DEPS:=@WANT_DEPS@

WANT_ASSEMBLY:=@WANT_ASSEMBLY@
ASM_PATH:=$(ABS_SRC_DIR)/mpn_extras/@ASM_PATH@

GMP_LIB_PATH:=@GMP_LIB_PATH@
MPFR_LIB_PATH:=@MPFR_LIB_PATH@
BLAS_LIB_PATH:=@BLAS_LIB_PATH@
GC_LIB_PATH:=@GC_LIB_PATH@
NTL_LIB_PATH:=@NTL_LIB_PATH@

CFLAGS:=@CFLAGS@
TESTCFLAGS:=@TESTCFLAGS@
CPPFLAGS:=-I$(ABS_SRC_DIR) -I$(SRC_DIR) @CPPFLAGS@ -DBUILDING_PML
CPPFLAGS2:=-L$(ABS_PML_DIR) $(CPPFLAGS)
LIB_CPPFLAGS:=@LIB_CPPFLAGS@
CXXFLAGS:=@CXXFLAGS@
LIBS:=@LIBS@
LIBS2:=-lpml $(LIBS)
PIC_FLAG:=@PIC_FLAG@

ifeq ($(WANT_ASSEMBLY),1)
ASMFLAGS:=@ASMFLAGS@
ASM_PIC_FLAG:=$(filter-out -D%,$(PIC_FLAG))
endif

UNROLL_LOOPS:=@UNROLL_LOOPS@
ifeq ($(UNROLL_LOOPS), 1)
ulong_extras_CFLAGS:=-funroll-loops
nmod_CFLAGS:=-funroll-loops
nmod_vec_CFLAGS:=-funroll-loops
nmod_mat_CFLAGS:=-funroll-loops
nmod_poly_CFLAGS:=-funroll-loops
arith_CFLAGS:=-funroll-loops
endif

LDFLAGS:=@LDFLAGS@
EXTRA_SHARED_FLAGS:=@EXTRA_SHARED_FLAGS@ $(foreach path, $(sort $(GMP_LIB_PATH) $(MPFR_LIB_PATH) $(BLAS_LIB_PATH) $(GC_LIB_PATH) $(NTL_LIB_PATH)), @WL@-rpath,$(path))
EXE_LDFLAGS:=$(LDFLAGS) $(foreach path, $(sort $(PML_DIR) $(GMP_LIB_PATH) $(MPFR_LIB_PATH) $(BLAS_LIB_PATH) $(GC_LIB_PATH) $(NTL_LIB_PATH)), @WL@-rpath,$(path))

# Obtain level of parallel
JOBS:=$(filter -j%,$(MAKEFLAGS))
NJOBS:=$(patsubst -j%,%,$(JOBS))

# User may specify -j without specifying the number of jobs
ifneq ($(JOBS),)
ifeq ($(NJOBS),)
# TODO: Create a thing in autoconf in order to obtain the number of available
# cores when -j is specified without any number attached, such as `nproc`.
NJOBS:=8
endif
endif

################################################################################
################################################################################
# files and directories
################################################################################
################################################################################

################################################################################
# configuration files
################################################################################

CFG_HEADERS :=                                                              \
        $(SRC_DIR)/config.h             $(SRC_DIR)/pml-config.h             \
        $(SRC_DIR)/pml.h                                                    \


_CFG_FILES :=                                                                \
        $(PML_DIR)/config.log         $(PML_DIR)/pml.pc                     \
        $(PML_DIR)/Makefile           $(PML_DIR)/config.status              \
        $(PML_DIR)/config.m4

CFG_FILES := $(_CFG_FILES) $(CFG_HEADERS)

################################################################################
# directories
################################################################################

HEADLESS_DIRS :=

HEADER_DIRS :=                                                              \
        fmpz_extra                                                          \
        fmpz_mat_extra                                                      \
        nmod32_vec                                                          \
        nmod_extra                                                          \
        nmod_mat_extra                                                      \
        nmod_mat_poly_extra                                                 \
        nmod_poly_extra                                                     \
        nmod_poly_mat_extra                                                 \
        nmod_vec_extra                                                      \
        sagemath_extra

DIRS := $(HEADLESS_DIRS) $(HEADER_DIRS)

TEMPLATE_DIRS :=

BUILD_DIRS :=                                                               \
        $(BUILD_DIR)                                                        \
        $(patsubst %, $(BUILD_DIR)/%, $(DIRS))                              \
        $(patsubst %, $(BUILD_DIR)/%/profile, $(DIRS))                      \
        $(patsubst %, $(BUILD_DIR)/%/test, $(DIRS))                         \
        $(patsubst %, $(BUILD_DIR)/%/tune, $(DIRS))                         \
        $(BUILD_DIR)/examples           $(BUILD_DIR)/profile                \
        $(BUILD_DIR)/test               $(BUILD_DIR)/tune

ifneq ($(COVERAGE), 0)
BUILD_DIRS +=                                                               \
        $(BUILD_DIR)/coverage
endif

INSTALL_DIRS :=                                                             \
        $(DESTDIR)$(LIBDIR)             $(DESTDIR)$(INCLUDEDIR)/pml         \
        $(DESTDIR)$(PKGCONFIGDIR)
ifneq ($(PML_DLLLIB),0)
INSTALL_DIRS += $(DESTDIR)$(BINDIR)
endif

################################################################################
# headers
################################################################################

HEADERS := $(wildcard $(ABS_SRC_DIR)/*.h) $(CFG_HEADERS)

#HEADERS += $(wildcard $(ABS_SRC_DIR)/mapml/*.h) 

################################################################################
# sources
################################################################################

define xxx_SOURCES
$(1)_SOURCES := $(wildcard $(ABS_SRC_DIR)/$(1)/*.c)
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_SOURCES,$(dir))))

SOURCES := $(foreach dir,$(DIRS),$($(dir)_SOURCES))

define xxx_PROF_SOURCES
$(1)_PROF_SOURCES := $(wildcard $(ABS_SRC_DIR)/$(1)/profile/*.c)
endef
_PROF_SOURCES := $(wildcard $(ABS_SRC_DIR)/profile/*.c)
$(foreach dir, $(DIRS), $(eval $(call xxx_PROF_SOURCES,$(dir))))
PROF_SOURCES := $(foreach dir,$(DIRS),$($(dir)_PROF_SOURCES)) $(_PROF_SOURCES)

define xxx_TEST_SOURCES
$(1)_TEST_SOURCES := $(wildcard $(ABS_SRC_DIR)/$(1)/test/main.c)
endef
_TEST_SOURCES := $(wildcard $(ABS_SRC_DIR)/test/main.c)
$(foreach dir, $(DIRS), $(eval $(call xxx_TEST_SOURCES,$(dir))))
TEST_SOURCES := $(_TEST_SOURCES) $(foreach dir,$(DIRS),$($(dir)_TEST_SOURCES)) $(fq_zech_vec_TEST_SOURCES)

define xxx_TUNE_SOURCES
$(1)_TUNE_SOURCES := $(wildcard $(ABS_SRC_DIR)/$(1)/tune/*.c)
endef
_TUNE_SOURCES := $(wildcard $(ABS_SRC_DIR)/tune/*.c)
$(foreach dir, $(DIRS), $(eval $(call xxx_TUNE_SOURCES,$(dir))))
TUNE_SOURCES := $(foreach dir,$(DIRS),$($(dir)_TUNE_SOURCES)) $(_TUNE_SOURCES)

EXMP_SOURCES := $(wildcard $(ABS_PML_DIR)/examples/*.c)

################################################################################
# objects
################################################################################

ifneq ($(STATIC), 0)
define xxx_OBJS
$(1)_OBJS := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%.o,$(filter-out %.s,$($(1)_SOURCES)))
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_OBJS,$(dir))))
OBJS := $(foreach dir, $(DIRS), $($(dir)_OBJS))
endif

################################################################################
# library objects
################################################################################

ifneq ($(SHARED), 0)
define xxx_LOBJS
$(1)_LOBJS := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%.lo,$(filter-out %.s, $($(1)_SOURCES)))
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_LOBJS,$(dir))))

LOBJS := $(foreach dir, $(DIRS), $($(dir)_LOBJS))
endif

################################################################################
# executables
################################################################################

define xxx_PROFS
$(1)_PROFS := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$($(1)_PROF_SOURCES))
endef
_PROFS := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(_PROF_SOURCES))
$(foreach dir, $(DIRS), $(eval $(call xxx_PROFS,$(dir))))
PROFS := $(foreach dir,$(DIRS),$($(dir)_PROFS)) $(_PROFS)

define xxx_TESTS
$(1)_TESTS := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$($(1)_TEST_SOURCES))
endef
_TESTS := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(_TEST_SOURCES))
$(foreach dir, $(DIRS), $(eval $(call xxx_TESTS,$(dir))))

TESTS := $(_TESTS) $(foreach dir,$(DIRS),$($(dir)_TESTS)) $(interfaces_TESTS)

define xxx_TUNES
$(1)_TUNES := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$($(1)_TUNE_SOURCES))
endef
_TUNES := $(patsubst $(ABS_SRC_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(_TUNE_SOURCES))
$(foreach dir, $(DIRS), $(eval $(call xxx_TUNES,$(dir))))
TUNES := $(foreach dir,$(DIRS),$($(dir)_TUNES)) $(_TUNES)

EXMPS := $(patsubst $(ABS_PML_DIR)/%.c,$(BUILD_DIR)/%$(EXEEXT),$(EXMP_SOURCES))

################################################################################
################################################################################
# recipes
################################################################################
################################################################################

################################################################################
# main recipe
################################################################################

all: library

################################################################################
# library
################################################################################

ifneq ($(SHARED), 0)
library: shared
endif
ifneq ($(STATIC), 0)
library: static
endif

ifneq ($(SHARED), 0)
shared: $(PML_DIR)/$(PML_LIB_FULL)

# The following is to avoid reaching the maximum length of command line
# arguments, mainly present on MinGW.
define xxx_merged_lobj_rule
$(BUILD_DIR)/$(1)_merged.lo: $($(1)_LOBJS) | $(BUILD_DIR)
	@$(LD) -r $($(1)_LOBJS) -o $(BUILD_DIR)/$(1)_merged.lo
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_merged_lobj_rule,$(dir))))
MERGED_LOBJS:=$(foreach dir, $(DIRS),$(BUILD_DIR)/$(dir)_merged.lo)

$(PML_DIR)/$(PML_LIB_FULL): $(MERGED_LOBJS)
	@echo "Building $(PML_LIB_FULL)"
	@$(CC) $(CFLAGS) -shared $(EXTRA_SHARED_FLAGS) $(MERGED_LOBJS) -o $(PML_LIB_FULL) $(LDFLAGS) $(LIBS)
	@$(RM_F) $(PML_LIB)
	@$(RM_F) $(PML_LIB_MAJOR)
	@$(LN_S) $(PML_LIB_FULL) $(PML_LIB)
	@$(LN_S) $(PML_LIB_FULL) $(PML_LIB_MAJOR)
endif

ifneq ($(STATIC), 0)
static: $(PML_DIR)/$(PML_LIB_STATIC)

# The following is to avoid reaching the maximum length of command line
# arguments, mainly present on MinGW.
define xxx_merged_obj_rule
$(BUILD_DIR)/$(1)_merged.o: $($(1)_OBJS) | $(BUILD_DIR)
	@$(LD) -r $($(1)_OBJS) -o $(BUILD_DIR)/$(1)_merged.o
endef
$(foreach dir, $(DIRS), $(eval $(call xxx_merged_obj_rule,$(dir))))
MERGED_OBJS:=$(foreach dir, $(DIRS),$(BUILD_DIR)/$(dir)_merged.o)

$(PML_DIR)/$(PML_LIB_STATIC): $(MERGED_OBJS)
	@echo "Building $(PML_LIB_STATIC)"
	@$(AR) rcs $(PML_DIR)/$(PML_LIB_STATIC) $(MERGED_OBJS)
endif

################################################################################
# directories
################################################################################

$(BUILD_DIRS) $(INSTALL_DIRS):
	$(MKDIR_P) $@

$(BUILD_DIR)/include: $(HEADERS)
	$(MKDIR_P) $@/pml && $(CP) $(HEADERS) $@/pml

################################################################################
# inclusions
################################################################################

ifneq ($(WANT_DEPS), 0)

ifeq ($(words $(MAKECMDGOALS)), 0)

-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d

else ifeq ($(words $(MAKECMDGOALS)), 1)

ifeq ($(MAKECMDGOALS), clean)
# Include nothing
else ifeq ($(MAKECMDGOALS), dist)
# Include nothing
else ifeq ($(MAKECMDGOALS), distclean)
# Include nothing
else ifeq ($(MAKECMDGOALS), uninstall)
# Include nothing
else ifeq ($(findstring print-,$(MAKECMDGOALS)), print-)
# Include nothing
else ifeq ($(MAKECMDGOALS), static)
-include $(BUILD_DIR)/*/*.o.d
else ifeq ($(MAKECMDGOALS), shared)
-include $(BUILD_DIR)/*/*.lo.d
else ifeq ($(MAKECMDGOALS), library)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
else ifeq ($(MAKECMDGOALS), install)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
else ifeq ($(MAKECMDGOALS), examples)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/examples/*.d
else ifeq ($(MAKECMDGOALS), profile)
ifdef MOD
$(warning Dependency tracking only set to cover the profile executables of $(MOD).)
-include $(foreach dir, $(MOD), $(BUILD_DIR)/$(dir)/profile/*.d)
else
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/profile/*.d
-include $(BUILD_DIR)/*/profile/*.d
endif
else ifeq ($(MAKECMDGOALS), tests)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
else ifeq ($(MAKECMDGOALS), check)
ifdef MOD
$(warning Dependency tracking only set to cover the test executables of $(MOD).)
-include $(foreach dir, $(MOD), $(BUILD_DIR)/$(dir)/test/*.d)
else
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
endif
else ifeq ($(MAKECMDGOALS), debug)
ifdef MOD
$(warning Dependency tracking only set to cover the test executables of $(MOD).)
-include $(foreach dir, $(MOD), $(BUILD_DIR)/$(dir)/test/*.d)
else
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
endif
else ifeq ($(MAKECMDGOALS), tune)
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/tune/*.d
-include $(BUILD_DIR)/*/tune/*.d
else ifeq ($(MAKECMDGOALS), valgrind)
ifdef MOD
$(warning Dependency tracking only set to cover the test executables of $(MOD).)
-include $(foreach dir, $(MOD), $(BUILD_DIR)/$(dir)/test/*.d)
else
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
endif
else
# Cannot recognize the command, so we simply include everything
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
-include $(BUILD_DIR)/profile/*.d
-include $(BUILD_DIR)/*/profile/*.d
-include $(BUILD_DIR)/examples/*.d
endif

else

# Multiple goals. Not currently implemented, so simply include everything.
-include $(BUILD_DIR)/*/*.o.d
-include $(BUILD_DIR)/*/*.lo.d
-include $(BUILD_DIR)/test/*.d
-include $(BUILD_DIR)/*/test/*.d
-include $(BUILD_DIR)/profile/*.d
-include $(BUILD_DIR)/*/profile/*.d
-include $(BUILD_DIR)/examples/*.d

endif

endif

DEPFLAGS = -MMD -MP -MF $(@:%=%.d)

################################################################################
# objects
################################################################################

ifneq ($(STATIC), 0)
define xxx_OBJS_rule
$(BUILD_DIR)/$(1)/%.o: $(ABS_SRC_DIR)/$(1)/%.c | $(BUILD_DIR)/$(1)
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(CFLAGS) $($(1)_CFLAGS) $(CPPFLAGS) $(LIB_CPPFLAGS) -c $$< -o $$@ $$(DEPFLAGS)
endef

$(foreach dir, $(DIRS), $(eval $(call xxx_OBJS_rule,$(dir))))
endif

################################################################################
# library objects
################################################################################

ifneq ($(SHARED), 0)
define xxx_LOBJS_rule
$(BUILD_DIR)/$(1)/%.lo: $(ABS_SRC_DIR)/$(1)/%.c | $(BUILD_DIR)/$(1)
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(PIC_FLAG) $(CFLAGS) $($(1)_CFLAGS) $(CPPFLAGS) $(LIB_CPPFLAGS) -c $$< -o $$@ $$(DEPFLAGS)
endef

$(foreach dir, $(DIRS), $(eval $(call xxx_LOBJS_rule,$(dir))))
endif

################################################################################
# executables
################################################################################

ifeq ($(SHARED), 0)
$(BUILD_DIR)/profile/%$(EXEEXT): $(ABS_SRC_DIR)/profile/%.c $(PML_DIR)/$(PML_LIB_STATIC) | $(BUILD_DIR)/profile
	@echo "  CC  $(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/profile/%$(EXEEXT): $(ABS_SRC_DIR)/profile/%.c | $(PML_DIR)/$(PML_LIB_FULL) $(BUILD_DIR)/profile
	@echo "  CC  $(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif

ifeq ($(SHARED), 0)
define xxx_PROFS_rule
$(BUILD_DIR)/$(1)/profile/%$(EXEEXT): $(ABS_SRC_DIR)/$(1)/profile/%.c $(PML_DIR)/$(PML_LIB_STATIC) | $(BUILD_DIR)/$(1)/profile
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
else
define xxx_PROFS_rule
$(BUILD_DIR)/$(1)/profile/%$(EXEEXT): $(ABS_SRC_DIR)/$(1)/profile/%.c | $(PML_DIR)/$(PML_LIB_FULL) $(BUILD_DIR)/$(1)/profile
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
endif

$(foreach dir, $(DIRS), $(eval $(call xxx_PROFS_rule,$(dir))))

ifeq ($(SHARED), 0)
$(BUILD_DIR)/test/%$(EXEEXT): $(ABS_SRC_DIR)/test/%.c $(PML_DIR)/$(PML_LIB_STATIC) | $(BUILD_DIR)/test
	@echo "  CC  $(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/test/%$(EXEEXT): $(ABS_SRC_DIR)/test/%.c | $(PML_DIR)/$(PML_LIB_FULL) $(BUILD_DIR)/test
	@echo "  CC  $(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif

ifeq ($(SHARED), 0)
define xxx_TESTS_rule
$(BUILD_DIR)/$(1)/test/%$(EXEEXT): $(ABS_SRC_DIR)/$(1)/test/%.c $(PML_DIR)/libpml.a | $(BUILD_DIR)/$(1)/test
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
else
define xxx_TESTS_rule
$(BUILD_DIR)/$(1)/test/%$(EXEEXT): $(ABS_SRC_DIR)/$(1)/test/%.c | $(PML_DIR)/$(PML_LIB_FULL) $(BUILD_DIR)/$(1)/test
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
endif

$(foreach dir, $(DIRS), $(eval $(call xxx_TESTS_rule,$(dir))))

ifeq ($(SHARED), 0)
$(BUILD_DIR)/tune/%$(EXEEXT): $(ABS_SRC_DIR)/tune/%.c $(PML_DIR)/$(PML_LIB_STATIC) | $(BUILD_DIR)/tune
	@echo "  CC  $(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
else
$(BUILD_DIR)/tune/%$(EXEEXT): $(ABS_SRC_DIR)/tune/%.c | $(PML_DIR)/$(PML_LIB_FULL) $(BUILD_DIR)/tune
	@echo "  CC  $(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS)
endif

ifeq ($(SHARED), 0)
define xxx_TUNES_rule
$(BUILD_DIR)/$(1)/tune/%$(EXEEXT): $(ABS_SRC_DIR)/$(1)/tune/%.c $(PML_DIR)/$(PML_LIB_STATIC) | $(BUILD_DIR)/$(1)/tune
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
else
define xxx_TUNES_rule
$(BUILD_DIR)/$(1)/tune/%$(EXEEXT): $(ABS_SRC_DIR)/$(1)/tune/%.c | $(PML_DIR)/$(PML_LIB_FULL) $(BUILD_DIR)/$(1)/tune
	@echo "  CC  $$(<:$(ABS_SRC_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $$< -o $$@ $(EXE_LDFLAGS) $(LIBS2) $$(DEPFLAGS)
endef
endif

$(foreach dir, $(DIRS), $(eval $(call xxx_TUNES_rule,$(dir))))

ifeq ($(SHARED), 0)
$(BUILD_DIR)/examples/%$(EXEEXT): $(ABS_PML_DIR)/examples/%.c $(PML_DIR)/$(PML_LIB_STATIC) | $(BUILD_DIR)/examples $(BUILD_DIR)/include
	@echo "  CC  $(<:$(ABS_PML_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS) -I$(BUILD_DIR)/include
else
$(BUILD_DIR)/examples/%$(EXEEXT): $(ABS_PML_DIR)/examples/%.c | $(PML_DIR)/$(PML_LIB_FULL) $(BUILD_DIR)/examples $(BUILD_DIR)/include
	@echo "  CC  $(<:$(ABS_PML_DIR)/%=%)"
	@$(CC) $(TESTCFLAGS) $(CPPFLAGS2) $< -o $@ $(EXE_LDFLAGS) $(LIBS2) $(DEPFLAGS) -I$(BUILD_DIR)/include
endif

################################################################################
# examples
################################################################################

examples: library $(EXMPS)

%_EXMP_RUN: %
	@$(ABS_PML_DIR)/dev/check_examples.sh $(patsubst $(BUILD_DIR)/examples/%,%,$<) $(BUILD_DIR)/examples

checkexamples: examples $(EXMPS:%=%_EXMP_RUN)

################################################################################
# profiling
################################################################################

ifdef MOD
profile: library $(foreach dir, $(MOD), $($(dir)_PROFS))
else
profile: library $(PROFS)
endif

################################################################################
# tests
################################################################################

tests: library $(TESTS)

# NOTE: File has to be located in another directory in order for this to work.
%_TEST_RUN: %
	@$<

%_TEST_RUN_ARGS: %
	@$< $(ARGS)

# Parallel running of same test file
ifneq ($(NJOBS),)
number_generator=$(words $2) $(if $(word $1,$2),,$(call number_generator,$1,w $2))
THREAD_LIST:=$(call number_generator,$(NJOBS),w)

define xxx_test_run_parallel
%_TEST_RUN_$(1): %
	@$$< --numthreads=$(NJOBS) --thread=$(1)
endef
$(foreach num, $(THREAD_LIST), $(eval $(call xxx_test_run_parallel,$(num))))
endif

ifdef MOD
ifdef ARGS
ifneq ($(words $(sort $(MOD))),1)
$(error Can only check one modules with arguments.)
else
check: library $(patsubst %,%_TEST_RUN_ARGS, $($(sort $(MOD))_TESTS))
	@echo ''
	@echo 'All tests passed for $(sort $(MOD)).'
endif
else
ifeq ($(NJOBS),)
check: library $(patsubst %,%_TEST_RUN,$(foreach dir, $(MOD), $($(dir)_TESTS)))
	@echo ''
ifeq ($(words $(sort $(MOD))),0)
	@echo 'No tests where performed.'
else ifeq ($(words $(sort $(MOD))),1)
	@echo 'All tests passed for $(sort $(MOD)).'
else ifeq ($(words $(sort $(MOD))),2)
	@echo 'All tests passed for $(firstword $(sort $(MOD))) and $(lastword $(sort $(MOD))).'
else
	@echo 'All tests passed for $(foreach dir,$(filter-out $(lastword $(filter-out $(lastword $(sort $(MOD))),$(sort $(MOD)))) $(lastword $(sort $(MOD))),$(sort $(MOD))),$(dir),) $(lastword $(filter-out $(lastword $(sort $(MOD))),$(sort $(MOD)))) and $(lastword $(sort $(MOD))).'
endif
else
check: library $(foreach x_test,$(patsubst %,%_TEST_RUN,$(foreach dir,$(MOD),$($(dir)_TESTS))),$(foreach num,$(THREAD_LIST),$(x_test)_$(num)))
	@echo ''
ifeq ($(words $(sort $(MOD))),0)
	@echo 'No tests where performed.'
else ifeq ($(words $(sort $(MOD))),1)
	@echo 'All tests passed for $(sort $(MOD)).'
else ifeq ($(words $(sort $(MOD))),2)
	@echo 'All tests passed for $(firstword $(sort $(MOD))) and $(lastword $(sort $(MOD))).'
else
	@echo 'All tests passed for $(foreach dir,$(filter-out $(lastword $(filter-out $(lastword $(sort $(MOD))),$(sort $(MOD)))) $(lastword $(sort $(MOD))),$(sort $(MOD))),$(dir),) $(lastword $(filter-out $(lastword $(sort $(MOD))),$(sort $(MOD)))) and $(lastword $(sort $(MOD))).'
endif
endif
endif
else
check: library $(TESTS:%=%_TEST_RUN)
	@echo ''
	@echo 'All tests passed.'
endif

################################################################################
# debugging
################################################################################

%_TEST_DBG_RUN_ARGS: %
	@$(GDB) --args $< $(ARGS)

ifdef MOD
ifdef ARGS
DEBUG:=1
debug: library $(patsubst %,%_TEST_DBG_RUN_ARGS, $($(sort $(MOD))_TESTS))
endif
endif

ifneq ($(DEBUG),1)
debug:
	$(error Can only run debugger with one module and one argument at a time)
endif

################################################################################
# tuning
################################################################################

tune: library $(TUNES)

################################################################################
# valgrind
################################################################################

%_VALGRIND_RUN: %
	valgrind --track-origins=yes --leak-check=full --show-reachable=yes --log-file="$*.valgrind" $<

ifdef MOD
valgrind: library $(patsubst %,%_VALGRIND_RUN,$(foreach dir, $(MOD), $($(dir)_TESTS)))
else
valgrind: library $(TESTS:%=%_VALGRIND_RUN)
endif

################################################################################
# coverage
################################################################################

ifneq ($(COVERAGE), 0)
# NOTE: Requires lcov v2.0
coverage: | $(BUILD_DIR)/coverage
	lcov -j $(NJOBS) --capture --rc geninfo_unexecuted_blocks=1 --ignore-errors unused --omit-lines "flint_throw" --omit-lines '^}$$' --exclude "/usr/*" --exclude "src/*/inlines.c" --exclude "src/test/main.c" --exclude "src/test/t-*.c" --exclude "src/*/test/main.c" --exclude "src/*/test/t-*.c" --exclude "src/generic_files/exception.c" --exclude "src/generic_files/profiler.c" --exclude "src/profiler.h" --directory build --output-file build/coverage/coverage.info

coverage_html: coverage
	genhtml $(NJOBS) $(BUILD_DIR)/coverage/coverage.info --output-directory $(BUILD_DIR)/coverage
endif

################################################################################
# clean
################################################################################

clean:
	$(RM_F) $(PML_DIR)/$(PML_LIB)
	$(RM_F) $(PML_DIR)/$(PML_LIB_MAJOR)
	$(RM_F) $(PML_DIR)/$(PML_LIB_FULL)
ifneq ($(PML_DLLLIB), 0)
	$(RM_F) $(PML_DIR)/$(PML_IMPLIB)
endif
	$(RM_F) $(PML_DIR)/$(PML_LIB_STATIC)
	$(RM_RF) $(BUILD_DIR)

distclean: clean
	$(RM_F) $(CFG_FILES)

################################################################################
# install and uninstall
################################################################################

install: library | $(INSTALL_DIRS)
	$(CP) pml.pc $(DESTDIR)$(PKGCONFIGDIR)/pml.pc
ifneq ($(SHARED), 0)
ifneq ($(PML_DLLLIB),0)
	$(CP_A) $(PML_DIR)/$(PML_LIB) $(DESTDIR)$(BINDIR)
	$(CP_A) $(PML_DIR)/$(PML_LIB_MAJOR) $(DESTDIR)$(BINDIR)
	$(CP_A) $(PML_DIR)/$(PML_LIB_FULL) $(DESTDIR)$(BINDIR)
	$(CP) $(PML_DIR)/$(PML_IMPLIB) $(DESTDIR)$(LIBDIR)
else
	$(CP_A) $(PML_DIR)/$(PML_LIB) $(DESTDIR)$(LIBDIR)
	$(CP_A) $(PML_DIR)/$(PML_LIB_MAJOR) $(DESTDIR)$(LIBDIR)
	$(CP_A) $(PML_DIR)/$(PML_LIB_FULL) $(DESTDIR)$(LIBDIR)
endif
ifneq ($(PML_DYLIB),0)
	install_name_tool -id $(LIBDIR)/$(PML_LIB_FULL) $(DESTDIR)$(LIBDIR)/$(PML_LIB)
endif
endif
ifneq ($(STATIC), 0)
	$(CP) $(PML_DIR)/$(PML_LIB_STATIC) $(DESTDIR)$(LIBDIR)
endif
	$(CP) $(HEADERS) $(DESTDIR)$(INCLUDEDIR)/pml
	@echo ""
	@echo '############################################################'
	@echo '# NOTE:                                                    #'
	@echo '#                                                          #'
	@echo '# Before installing PML, ensure its reliability and        #'
	@echo '# functionality by running the command `make check'"'"'.   #'
	@echo '#                                                          #'
	@echo '# This will initiate a series of tests that validates the  #'
	@echo '# execution of PML.  This verification is a crucial step #'
	@echo '# in guaranteeing a stable and error-free execution of     #'
	@echo '# your software.                                           #'
	@echo '#                                                          #'
	@echo '############################################################'

uninstall:
	$(RM_F) $(DESTDIR)$(PKGCONFIGDIR)/pml.pc
ifneq ($(PML_DLLLIB),0)
	$(RM_F) $(DESTDIR)$(BINDIR)/$(PML_LIB)
	$(RM_F) $(DESTDIR)$(BINDIR)/$(PML_LIB_MAJOR)
	$(RM_F) $(DESTDIR)$(BINDIR)/$(PML_LIB_FULL)
	$(RM_F) $(DESTDIR)$(LIBDIR)/$(PML_IMPLIB)
else
	$(RM_F) $(DESTDIR)$(LIBDIR)/$(PML_LIB)
	$(RM_F) $(DESTDIR)$(LIBDIR)/$(PML_LIB_MAJOR)
	$(RM_F) $(DESTDIR)$(LIBDIR)/$(PML_LIB_FULL)
endif
	$(RM_F) $(DESTDIR)$(LIBDIR)/$(PML_LIB_STATIC)
	$(RM_RF) $(DESTDIR)$(INCLUDEDIR)/pml

################################################################################
# regenerate part of the build system of needed
################################################################################

ifneq ($(MAINTAINER_MODE),no)  # disable this for releases?
ifneq ($(shell command -v autoconf 2> /dev/null),)
$(ABS_PML_DIR)/configure: $(ABS_PML_DIR)/configure.ac
	@echo "Running autoconf"
	@cd $(ABS_PML_DIR) && autoconf && cd - >/dev/null
else
$(ABS_PML_DIR)/configure: $(ABS_PML_DIR)/configure.ac
	$(warning autoconf not available, proceeding with stale configure)
endif
endif

config.status: $(ABS_PML_DIR)/configure
	./config.status --recheck

Makefile: $(ABS_PML_DIR)/Makefile.in config.status
	./config.status $@

pml.pc: $(ABS_PML_DIR)/pml.pc.in config.status
	./config.status $@

$(SRC_DIR)/pml.h: $(ABS_SRC_DIR)/pml.h.in config.status
	./config.status $@

libtool: config.status
	./config.status $@

################################################################################
# maintainer stuff
################################################################################

# NOTE: Requires source directory is build directory
dist:
	$(PML_DIR)/dev/make_dist.sh $(PML_VERSION)

################################################################################
# makefile debugging
################################################################################

print-%:
	@echo "$*=$($*)"

.PHONY: all library shared static examples checkexamples profile tests check tune valgrind clean distclean install uninstall dist %_TEST_RUN %_TEST_RUN_% %_TEST_DGB_RUN_ARGS %_VALGRIND_RUN print-% coverage coverage_html debug
